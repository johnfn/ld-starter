import { Util } from "../util";
import * as fs from 'fs';
import * as path from 'path'

const configPath = process.argv[2];
const configDirectory = path.dirname(configPath);
const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
const assetDirectory = path.join(configDirectory, config.resources.assetsPath);
const resourceFilePath = path.join(configDirectory, config.resources.compiledResourcesFile);

function maxBy<T>(list: T[], fn: (T: T) => number): T | undefined {
  let highestT    : T | undefined = undefined;
  let highestValue: number | undefined = undefined;

  for (const item of list) {
    const value = fn(item);

    if (highestValue === undefined || value > highestValue) {
      highestT = item;
      highestValue = value;
    }
  }

  return highestT;
}

function walkDir(dir: string, callback: (path: string) => void) {
  fs.readdirSync(dir).forEach((f: string) => {
    const dirPath     = path.join(dir, f);
    const isDirectory = fs.statSync(dirPath).isDirectory();

    isDirectory ? walkDir(dirPath, callback) : callback(path.join(dir, f));
  });
};

function allNestedFiles(dir: string): string[] {
  let files: string[] = [];

  walkDir(dir, path => {
    files.push(path.slice(dir.length));
  });

  return files;
}

const buildResourceFile = () => {
  let output = `// THIS FILE IS AUTOGENERATED from the parameters in config.json. Do not edit it.

// If you want to change something about how it's generated, look at library/resource_builder.ts.

export enum ResourceType {
  Image,
  TileMap,
  Audio,
  Spritesheet,
}

export type ResourceName = keyof typeof ResourcesToLoad;

export const ResourcesToLoad = {
`

  const resourceExtensions = [
    '.png',
    '.gif',
    '.mp3',
    '.json',
  ];

  const allFiles = allNestedFiles(assetDirectory).filter(file => resourceExtensions.find(ext => file.endsWith(ext)));

  if (allFiles.length === 0) {
    output += "  // No files found!"
    output += "}"

    return output;
  }

  const longestFileLength = maxBy(allFiles, x => x.length)!.length;

  for (const fileName of allFiles) {
    let resourceType = ""

    if (fileName.endsWith(".png") || fileName.endsWith(".gif")) {
      resourceType = "ResourceType.Image";
    } else if (fileName.endsWith(".json")) {
      resourceType = "ResourceType.TileMap";
    } else if (fileName.endsWith(".mp3")) {
      resourceType = "ResourceType.Audio";
    }

    output += `  "${ fileName }"${ " ".repeat(longestFileLength - fileName.length) }: ${ resourceType },\n`;
  }

  output += "};";

  return output;
}

function writeResourceFile() {
  console.log(`[${ Util.FormatDate(new Date()) }] Recompiling...`);
  fs.writeFileSync(resourceFilePath, buildResourceFile());
}

fs.watch(
  assetDirectory, 
  { recursive: true }, 
  Util.Debounce(() => {
    writeResourceFile();
  })
);

writeResourceFile();